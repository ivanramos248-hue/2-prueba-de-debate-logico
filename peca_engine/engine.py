# === peca_engine/engine.py ===
# Motor PECA (Pensamiento y Explicaci√≥n Causal Artificial)
# Versi√≥n final compatible con Gemini (GenerativeModel)

import os
import re
import google.generativeai as genai

# === CONFIGURACI√ìN GEMINI ===
API_KEY = os.getenv("GEMINI_API_KEY")
if not API_KEY:
    raise EnvironmentError("‚ö†Ô∏è La variable GEMINI_API_KEY no est√° definida en el entorno.")

# Configura Gemini con la API key del entorno
genai.configure(api_key=API_KEY)

# Modelo que usaremos
MODEL_NAME = "gemini-2.0-flash"

# Funci√≥n utilitaria para generar texto desde un prompt
def generar_respuesta(prompt):
    model = genai.GenerativeModel(MODEL_NAME)
    response = model.generate_content(prompt)
    return response.text.strip()

# === ENTIDADES CAUSALES ===
class EntidadCausal:
    def __init__(self, id_name, nombre, principio):
        self.id = id_name
        self.nombre = nombre
        self.principio = principio

    def generar_prompt_tesis(self, pregunta):
        return (
            f"Soy {self.nombre}. Mi principio rector es: {self.principio}.\n"
            f"Debato sobre: {pregunta}.\n"
            "Ofrecer√© un razonamiento l√≥gico que respalde mi postura.\n"
        )

# === CONFIGURAR LAS TRES ENTIDADES ===
CRONO = EntidadCausal("crono", "CRONO", "M√°xima Causalidad y M√≠nima Fricci√≥n del Tiempo (MCT)")
AEON = EntidadCausal("aeon", "AEON", "Ley de Reversibilidad Entr√≥pica (LRE)")
MOROS = EntidadCausal("moros", "MOROS", "Ley de Transferencia de Memoria Causal (LTMC)")

ENTIDADES = [CRONO, AEON, MOROS]

# === FUNCI√ìN PRINCIPAL: Iniciar debate ===
def iniciar_red_de_debate(pregunta_causal, api_key=None):
    """
    Ejecuta un debate l√≥gico entre las 3 entidades usando el modelo Gemini.
    Devuelve un resumen final.
    """
    print(f"\nüß† Iniciando debate l√≥gico sobre: '{pregunta_causal}'\n")

    resultados = []

    for entidad in ENTIDADES:
        prompt = entidad.generar_prompt_tesis(pregunta_causal)
        try:
            print(f"üí¨ {entidad.nombre} est√° generando su argumento...")
            respuesta = generar_respuesta(prompt)
            resultados.append((entidad.nombre, respuesta))
        except Exception as e:
            resultados.append((entidad.nombre, f"‚ö†Ô∏è Error: {e}"))

    # Crear conclusi√≥n final combinando todas las posturas
    resumen_prompt = (
        "A continuaci√≥n se muestran tres argumentos causales sobre un mismo tema.\n"
        "Tu tarea es analizarlos y crear una conclusi√≥n equilibrada, clara y reflexiva.\n\n"
    )
    for nombre, texto in resultados:
        resumen_prompt += f"{nombre} dice:\n{texto}\n\n"

    resumen_prompt += "Genera una conclusi√≥n final integradora del debate."

    print("\nüß© Generando conclusi√≥n final...")
    conclusion = generar_respuesta(resumen_prompt)

    # Devolver todo como texto estructurado
    resultado_texto = "üß† DEBATE FINAL\n\n"
    for nombre, texto in resultados:
        resultado_texto += f"=== {nombre} ===\n{texto}\n\n"
    resultado_texto += f"üí° CONCLUSI√ìN FINAL:\n{conclusion}\n"

    print("‚úÖ Debate completado.\n")
    return resultado_texto
